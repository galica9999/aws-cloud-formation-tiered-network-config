{
  "Parameters": {
    "CidrBlock": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.0.0/16",
      "Description": "VPC CIDR Block (eg 10.0.0.0/16)",
      "Type": "String"
    },
    "AvailabilityZone1": {
      "Description": "The AvailabilityZone to use for the first subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "AvailabilityZone2": {
      "Description": "The AvailabilityZone to use for the second subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "OutsideNetA": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.1.0/24",
      "Description": "VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)",
      "Type": "String"
    },
    "OutsideNetB": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.2.0/24",
      "Description": "VPC CIDR Block for the Public Subnet 2 (eg 10.0.0.0/24)",
      "Type": "String"
    },
    "InsideNetA": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.3.0/24",
      "Description": "VPC CIDR Block for the Internal Subnet (eg 10.0.0.0/24)",
      "Type": "String"
    },
    "InsideNetB": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.4.0/24",
      "Description": "VPC CIDR Block for the Internal Subnet 2 (eg 10.0.0.0/24)",
      "Type": "String"
    },
    "DBNetA": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.5.0/24",
      "Description": "VPC CIDR Block for the DB Subnet 1 (eg 10.0.0.0/24)",
      "Type": "String"
    },
    "BDNetB": {
      "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
      "Default": "10.0.6.0/24",
      "Description": "VPC CIDR Block for the DB Subnet 2 (eg 10.0.0.0/24)",
      "Type": "String"
    },
    "DBInstanceID": {
      "Default": "mydbinstance",
      "Description": "My database instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and must not end with a hyphen or contain two consecutive hyphens."
    },
    "DBName": {
      "Default": "mydb",
      "Description": "My database",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters."
    },
    "DBInstanceClass": {
      "Default": "db.m5.large",
      "Description": "DB instance class",
      "Type": "String",
      "ConstraintDescription": "Must select a valid DB instance type."
    },
    "DBAllocatedStorage": {
      "Default": "50",
      "Description": "The size of the database (GiB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 20 and 65536 GiB."
    },
    "DBUsername": {
      "Description": "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description": "Password MySQL database access",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "AppAMItype": {
      "Description": "Instance type for app server",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ]
    },
    "AppAMI": {
      "Description": "AMI for app server",
      "Type": "String",
      "Default": "ami-03431b5a22dff7ba3",
      "AllowedValues": ["ami-03431b5a22dff7ba3"]
    },
    "webAMI": {
      "Description": "AMI for webend server",
      "Type": "String",
      "Default": "ami-0f1909d8e1611bf25",
      "AllowedValues": ["ami-0f1909d8e1611bf25"]
    },
    "appKeyName": {
      "Description": "EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "webKeyName": {
      "Description": "EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "S3BucketName": {
      "Type": "String",
      "Description": "Name the S3 bucket to be created to store VPC flow logs."
    },
    "ExternalID": {
      "Type": "String",
      "Description": "The Stealthwatch cloud Observable ID."
    }
  },
  "Resources": {
    "cloudformationVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "CidrBlock" },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [{ "Key": "Name", "Value": { "Ref": "AWS::StackName" } }]
      }
    },
    "outsideCloudformationSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "CidrBlock": { "Ref": "OutsideNetA" },
        "AvailabilityZone": { "Ref": "AvailabilityZone1" }
      }
    },
    "outsideCloudformationSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "CidrBlock": { "Ref": "OutsideNetB" },
        "AvailabilityZone": { "Ref": "AvailabilityZone2" }
      }
    },
    "insideCloudformationSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "CidrBlock": { "Ref": "InsideNetA" },
        "AvailabilityZone": { "Ref": "AvailabilityZone1" }
      }
    },
    "insideCloudformationSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "CidrBlock": { "Ref": "InsideNetB" },
        "AvailabilityZone": { "Ref": "AvailabilityZone2" }
      }
    },
    "DBCloudformationSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "CidrBlock": { "Ref": "DBNetA" },
        "AvailabilityZone": { "Ref": "AvailabilityZone1" }
      }
    },
    "DBCloudformationSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "CidrBlock": { "Ref": "BDNetB" },
        "AvailabilityZone": { "Ref": "AvailabilityZone2" }
      }
    },
    "webCloudformationSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http and port 3000 to web servers",
        "VpcId": { "Ref": "cloudformationVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 3000,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "appCloudformationSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "outsideCloudformationSubnetB",
        "outsideCloudformationSubnetA"
      ],
      "Properties": {
        "GroupDescription": "Allow http to app server",
        "VpcId": { "Ref": "cloudformationVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": { "Ref": "OutsideNetA" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": { "Ref": "OutsideNetB" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": { "Ref": "OutsideNetA" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": { "Ref": "OutsideNetB" }
          }
        ]
      }
    },
    "dbCloudformationSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "insideCloudformationSubnetA",
        "insideCloudformationSubnetB"
      ],
      "Properties": {
        "GroupDescription": "Allow mysql access to db",
        "VpcId": { "Ref": "cloudformationVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "CidrIp": { "Ref": "InsideNetA" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "CidrIp": { "Ref": "InsideNetB" }
          }
        ]
      }
    },
    "cloudformationIG": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "cfIG" }]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" },
        "InternetGatewayId": { "Ref": "cloudformationIG" }
      }
    },
    "cloudformationOutsideRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" }
      }
    },
    "myRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "cloudformationIG",
      "Properties": {
        "RouteTableId": { "Ref": "cloudformationOutsideRT" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "cloudformationIG" }
      }
    },
    "cloudformationInsideRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "cloudformationVPC" }
      }
    },
    "insideRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "cloudformationNATGW",
      "Properties": {
        "RouteTableId": { "Ref": "cloudformationInsideRT" },
        "DestinationCidrBlock": "0.0.0.0/24",
        "NatGatewayId": { "Ref": "cloudformationNATGW" }
      }
    },
    "cloudformationRTSubnetAssocA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "outsideCloudformationSubnetA" },
        "RouteTableId": { "Ref": "cloudformationOutsideRT" }
      }
    },
    "cloudformationRTSubnetAssocB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "outsideCloudformationSubnetB" },
        "RouteTableId": { "Ref": "cloudformationOutsideRT" }
      }
    },
    "cloudformationNATGW": {
      "Type": "AWS::EC2::NatGateway",
      "DependsOn": "EIP",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": ["EIP", "AllocationId"] },
        "SubnetId": { "Ref": "outsideCloudformationSubnetA" }
      }
    },
    "EIP": {
      "DependsOn": "AttachGateway",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "dbSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "DependsOn": ["DBCloudformationSubnetA", "DBCloudformationSubnetB"],
      "Properties": {
        "DBSubnetGroupDescription": "description",
        "SubnetIds": [
          { "Ref": "DBCloudformationSubnetA" },
          { "Ref": "DBCloudformationSubnetB" }
        ],
        "Tags": [
          {
            "Key": "String",
            "Value": "String"
          }
        ]
      }
    },
    "DB": {
      "Type": "AWS::RDS::DBInstance",
      "DependsOn": ["dbSubnetGroup", "dbCloudformationSG"],
      "Properties": {
        "DBInstanceIdentifier": {
          "Ref": "DBInstanceID"
        },
        "DBName": {
          "Ref": "DBName"
        },
        "DBInstanceClass": {
          "Ref": "DBInstanceClass"
        },
        "DBSubnetGroupName": { "Ref": "dbSubnetGroup" },
        "VPCSecurityGroups": [{ "Ref": "dbCloudformationSG" }],
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "Engine": "MySQL",
        "EngineVersion": "8.0.16",
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        }
      }
    },
    "appLaunchConfig": {
      "DependsOn": "DB",
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "ImageId": { "Ref": "AppAMI" },
          "InstanceType": { "Ref": "AppAMItype" },
          "KeyName": { "Ref": "appKeyName" },
          "SecurityGroupIds": [
            { "Fn::GetAtt": ["appCloudformationSG", "GroupId"] }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "sed -i -E 's/(host:(s+)?).+,/\\1",
                  "\"",
                  { "Fn::GetAtt": ["DB", "Endpoint.Address"] },
                  "\"",
                  ",/g\" /var/appServer/index.js\n",
                  "sed -i -E 's/(user:(s+)?).+,/\\1",
                  "\"",
                  { "Ref": "DBUsername" },
                  "\"",
                  ",/g\" /var/appServer/index.js\n",
                  "sed -i -E 's/(password:(s+)?).+,/\\1",
                  "\"",
                  { "Ref": "DBPassword" },
                  "\"",
                  ",/g\" /var/appServer/index.js\n"
                ]
              ]
            }
          }
        }
      }
    },
    "appASG": {
      "DependsOn": "DB",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": "1",
        "MaxSize": "2",
        "DesiredCapacity": "1",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "appLaunchConfig"
          },
          "Version": {
            "Fn::GetAtt": ["appLaunchConfig", "LatestVersionNumber"]
          }
        },
        "VPCZoneIdentifier": [
          { "Ref": "insideCloudformationSubnetA" },
          { "Ref": "insideCloudformationSubnetB" }
        ]
      }
    },
    "webLaunchConfig": {
      "DependsOn": "DB",
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "ImageId": { "Ref": "webAMI" },
          "InstanceType": { "Ref": "AppAMItype" },
          "KeyName": { "Ref": "webKeyName" },
          "SecurityGroupIds": [
            { "Fn::GetAtt": ["webCloudformationSG", "GroupId"] }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "sed -i -E 's/(host:(s+)?).+,/\\1",
                  "\"",
                  { "Fn::GetAtt": ["DB", "Endpoint.Address"] },
                  "\"",
                  ",/g\" /var/appServer/index.js\n",
                  "sed -i -E 's/(user:(s+)?).+,/\\1",
                  "\"",
                  { "Ref": "DBUsername" },
                  "\"",
                  ",/g\" /var/appServer/index.js\n",
                  "sed -i -E 's/(password:(s+)?).+,/\\1",
                  "\"",
                  { "Ref": "DBPassword" },
                  "\"",
                  ",/g\" /var/appServer/index.js\n"
                ]
              ]
            }
          }
        }
      }
    },
    "webASG": {
      "DependsOn": ["DB", "appASG"],
      "Type": "AWS::AutoScaling::AutoScalingGroup",

      "Properties": {
        "MinSize": "1",
        "MaxSize": "2",
        "DesiredCapacity": "1",
        "TargetGroupARNs": [{ "Ref": "WebTargetGroup" }],
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "webLaunchConfig"
          },
          "Version": {
            "Fn::GetAtt": ["webLaunchConfig", "LatestVersionNumber"]
          }
        },
        "VPCZoneIdentifier": [
          { "Ref": "outsideCloudformationSubnetA" },
          { "Ref": "outsideCloudformationSubnetB" }
        ]
      }
    },
    "webLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",

      "Properties": {
        "Scheme": "internet-facing",
        "IpAddressType": "ipv4",
        "Name": "webLoadBalancer",
        "Type": "application",
        "SecurityGroups": [
          { "Fn::GetAtt": ["webCloudformationSG", "GroupId"] }
        ],
        "Subnets": [
          { "Ref": "outsideCloudformationSubnetA" },
          { "Ref": "outsideCloudformationSubnetB" }
        ]
      }
    },
    "WebTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckEnabled": true,
        "HealthCheckPath": "/url",
        "HealthCheckPort": "80",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 3,
        "Name": "webTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "UnhealthyThresholdCount": 10,
        "VpcId": { "Ref": "cloudformationVPC" }
      }
    },
    "HTTPListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "WebTargetGroup" }
          }
        ],
        "Conditions": [
          {
            "Field": "source-ip",
            "SourceIpConfig": { "Values": ["0.0.0.0/0"] }
          }
        ],
        "ListenerArn": { "Ref": "HTTPlistener" },
        "Priority": 1
      }
    },
    "HTTPlistener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "WebTargetGroup" }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "webLoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    }
  }
}
